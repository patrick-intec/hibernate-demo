package be.infernalwhale;

import be.infernalwhale.model.Message;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class Main {
    public static void main(String[] args) {
        // JPA - Java Persistence API
        // Persistence - Continued Existence - (aka save data to database)
        // API - Application Programming Interface... A bundle of rules on how to use a system/part of a system
        // A set of interfaces - Specification (JDBC) <> Implementation (mysql-driver)
        // RuntimeException >> "No suitable driver found"

        // JPA - Hibernate
        // ORM-libraries >> Object Relational(DB) Mapping
        // Classes <> Tables

        // Connection Application <> DB
        // Mapping    Order class <> order_table table
        // Mapping    Product class <> order_product table

        // EMF <> Connection

        // EntityManager >> Managed Entities >>> WTF is an entity??
        // Entity >> Data-Class + Mapping Information

        // Column       <> Property
        // Record/Row   <> Instance/Object
        // Table        <> Data-Class

        EntityManagerFactory emf = Persistence.createEntityManagerFactory("patrick-source");
        EntityManager em = emf.createEntityManager();

//        Message msg = new Message();
//        msg.setId(1);
//        msg.setMessage("Hello Database");
//
//        em.persist(msg);

        em.getTransaction().begin();
        em.getTransaction().commit();

        // hbm2ddl - Hibernate Model To Data Definition Language

        // Autogenerated id...
        // Column and table definitions

        // repositories, design and use of the EntityManager, EntityTransaction

        // Object Identity: has to do with the object reference... ( == )
        // Object Equality: has to do with the object state...     ( .equals )
        // Database Identity: has to do with the PK

        // message read from db: { id: 1, message: 'Hello World' }
        // message after:        { id: 1, message: 'Hello Pluto' }

        // message read from db: { id: 1, message: 'Hello Database' }
//        Message fromDB = em.find(Message.class, 1);
//        fromDB.setMessage("Hello Some Planet");

        Message newMessage = new Message();
        newMessage.setId(1);
        newMessage.setMessage("Hello Io");
//
        em.persist(newMessage); // 1. Persist works with NEW objects/records
        em.merge(newMessage);   // 2. Merge works with existing records
        em.remove(newMessage);

        em.getTransaction().begin();
        em.getTransaction().commit();

        // 1. Maak een nieuw order. En save naar de database.
        // 2. Update het eerste order met bijvoorbeeld een nieuwe klantnaam/adres
        // 3. Check out em.remove(entity)
    }
}
